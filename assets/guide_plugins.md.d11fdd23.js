import{_ as e,o as a,c as o,Q as l}from"./chunks/framework.eb963252.js";const y=JSON.parse('{"title":"plugins","description":"","frontmatter":{},"headers":[],"relativePath":"guide/plugins.md","filePath":"guide/plugins.md","lastUpdated":1697325057000}'),s={name:"guide/plugins.md"},n=l(`<h1 id="plugins" tabindex="-1">plugins <a class="header-anchor" href="#plugins" aria-label="Permalink to &quot;plugins&quot;">​</a></h1><h2 id="插件使用示例" tabindex="-1">插件使用示例 <a class="header-anchor" href="#插件使用示例" aria-label="Permalink to &quot;插件使用示例&quot;">​</a></h2><h3 id="方式1" tabindex="-1">方式1 <a class="header-anchor" href="#方式1" aria-label="Permalink to &quot;方式1&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">container</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Container</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  el: </span><span style="color:#9ECBFF;">&#39;#container&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  layouts: {},</span></span>
<span class="line"><span style="color:#E1E4E8;">  plugins:[{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">ev</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">      console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(ev)</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">itemMounted</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">ev</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">      console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(ev)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }],</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">container</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Container</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  el: </span><span style="color:#032F62;">&#39;#container&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  layouts: {},</span></span>
<span class="line"><span style="color:#24292E;">  plugins:[{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(</span><span style="color:#E36209;">ev</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">      console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(ev)</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">itemMounted</span><span style="color:#24292E;">(</span><span style="color:#E36209;">ev</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">      console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(ev)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }],</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><h3 id="方式2" tabindex="-1">方式2 <a class="header-anchor" href="#方式2" aria-label="Permalink to &quot;方式2&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">container.</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">ev</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">      console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(ev)</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">itemMounted</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">ev</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">      console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(ev)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">container.</span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(</span><span style="color:#E36209;">ev</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">      console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(ev)</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">itemMounted</span><span style="color:#24292E;">(</span><span style="color:#E36209;">ev</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">      console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(ev)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span></code></pre></div><h3 id="方式3" tabindex="-1">方式3 <a class="header-anchor" href="#方式3" aria-label="Permalink to &quot;方式3&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">container.</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">ins</span><span style="color:#F97583;">:</span><span style="color:#B392F0;">Container</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">console</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">ins</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">container.</span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">ins</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;">Container</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">console</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">ins</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>参考浏览器事件机制实现，每个事件基本都有默认行为和该事件相关的一些字段信息</p><ul><li>若要获取事件详情，您可以通过回调函数<code>参数1</code>的<code>event对象</code>获取</li><li>若要阻止默认行为，您可以通过<code>ev,prevent()</code>进行阻止</li></ul><h2 id="通用插件钩子" tabindex="-1">通用插件钩子 <a class="header-anchor" href="#通用插件钩子" aria-label="Permalink to &quot;通用插件钩子&quot;">​</a></h2><h3 id="error" tabindex="-1">error <a class="header-anchor" href="#error" aria-label="Permalink to &quot;error&quot;">​</a></h3><ul><li><p>type: <code>(ev: ThrowMessageEvent): void</code></p></li><li><p>required: <code>false</code></p><p>所有框架错误都会在这里接收，您可以通过ev.prevent()进行阻止框架抛出错误</p></li></ul><h3 id="warn" tabindex="-1">warn <a class="header-anchor" href="#warn" aria-label="Permalink to &quot;warn&quot;">​</a></h3><ul><li><p>type: <code>(ev: ThrowMessageEvent): void</code></p></li><li><p>required: <code>false</code></p><p>所有框架警告都会在这里接收，您可以通过ev.prevent()进行阻止框架抛出警告</p></li></ul><h3 id="config" tabindex="-1">config <a class="header-anchor" href="#config" aria-label="Permalink to &quot;config&quot;">​</a></h3><ul><li><p>type: <code>(ev: InitOptionsEvent): void</code></p></li><li><p>required: <code>false</code></p><p>用户传入的配置信息</p></li></ul><h3 id="configresolved" tabindex="-1">configResolved <a class="header-anchor" href="#configresolved" aria-label="Permalink to &quot;configResolved&quot;">​</a></h3><ul><li><p>type: <code>(ev: InitOptionsEvent): void</code></p></li><li><p>required: <code>false</code></p><p>经过各个插件的config之后的最终配置</p></li></ul><h3 id="getconfig" tabindex="-1">getConfig <a class="header-anchor" href="#getconfig" aria-label="Permalink to &quot;getConfig&quot;">​</a></h3><ul><li><p>type: <code>(ev: ConfigurationEvent): void</code></p></li><li><p>required: <code>false</code></p><p>拦截获取配置事件，设置过程可被拦截(configName,configData)修改</p></li></ul><h3 id="setconfig" tabindex="-1">setConfig <a class="header-anchor" href="#setconfig" aria-label="Permalink to &quot;setConfig&quot;">​</a></h3><ul><li><p>type: <code>(ev: ConfigurationEvent): void</code></p></li><li><p>required: <code>false</code></p><p>拦截获取配置事件，设置过程可被拦截(configName,configData)修改</p></li></ul><h3 id="containermountbefore" tabindex="-1">containerMountBefore <a class="header-anchor" href="#containermountbefore" aria-label="Permalink to &quot;containerMountBefore&quot;">​</a></h3><ul><li><p>type: <code>(ev: BaseEvent): void</code></p></li><li><p>required: <code>false</code></p><p>容器挂载之前</p></li></ul><h3 id="containermounted" tabindex="-1">containerMounted <a class="header-anchor" href="#containermounted" aria-label="Permalink to &quot;containerMounted&quot;">​</a></h3><ul><li><p>type: <code>(ev: BaseEvent): void</code></p></li><li><p>required: <code>false</code></p><p>Container成功挂载事件</p></li></ul><h3 id="containerunmounted" tabindex="-1">containerUnmounted <a class="header-anchor" href="#containerunmounted" aria-label="Permalink to &quot;containerUnmounted&quot;">​</a></h3><ul><li><p>type: <code>(ev: BaseEvent): void</code></p></li><li><p>required: <code>false</code></p><p>Container成功卸载事件</p></li></ul><h3 id="containerresizing" tabindex="-1">containerResizing <a class="header-anchor" href="#containerresizing" aria-label="Permalink to &quot;containerResizing&quot;">​</a></h3><ul><li><p>type: <code>(ev: BaseEvent): void</code></p></li><li><p>required: <code>false</code></p><p>Container dom盒子大小改变</p></li></ul><h3 id="colchanged" tabindex="-1">colChanged <a class="header-anchor" href="#colchanged" aria-label="Permalink to &quot;colChanged&quot;">​</a></h3><ul><li><p>type: <code>(ev: ContainerSizeChangeEvent): void</code></p></li><li><p>required: <code>false</code></p><p>col列数改变</p></li></ul><h3 id="rowchanged" tabindex="-1">rowChanged <a class="header-anchor" href="#rowchanged" aria-label="Permalink to &quot;rowChanged&quot;">​</a></h3><ul><li><p>type: <code>(ev: ContainerSizeChangeEvent): void</code></p></li><li><p>required: <code>false</code></p><p>row列数改变</p></li></ul><h3 id="additemsuccess" tabindex="-1">addItemSuccess <a class="header-anchor" href="#additemsuccess" aria-label="Permalink to &quot;addItemSuccess&quot;">​</a></h3><ul><li><p>type: <code>(ev: BaseEvent): void</code></p></li><li><p>required: <code>false</code></p><p>Item添加成功事件</p></li></ul><h3 id="itemmounted" tabindex="-1">itemMounted <a class="header-anchor" href="#itemmounted" aria-label="Permalink to &quot;itemMounted&quot;">​</a></h3><ul><li><p>type: <code>(ev: BaseEvent): void</code></p></li><li><p>required: <code>false</code></p><p>Item成功挂载事件</p></li></ul><h3 id="itemunmounted" tabindex="-1">itemUnmounted <a class="header-anchor" href="#itemunmounted" aria-label="Permalink to &quot;itemUnmounted&quot;">​</a></h3><ul><li><p>type: <code>(ev: BaseEvent): void</code></p></li><li><p>required: <code>false</code></p><p>Item成功卸载事件</p></li></ul><h3 id="itemposchanged" tabindex="-1">itemPosChanged <a class="header-anchor" href="#itemposchanged" aria-label="Permalink to &quot;itemPosChanged&quot;">​</a></h3><ul><li><p>type: <code>(ev: ItemPosChangeEvent): void</code></p></li><li><p>required: <code>false</code></p><p>item 位置变化 或 尺寸变化 时响应的事件,pos变化才触发</p></li></ul><h3 id="click" tabindex="-1">click <a class="header-anchor" href="#click" aria-label="Permalink to &quot;click&quot;">​</a></h3><ul><li><p>type: <code>(ev: GridClickEvent): void</code></p></li><li><p>required: <code>false</code></p><p>点击容器或者item触发的事件</p></li></ul><h3 id="exchangeverification" tabindex="-1">exchangeVerification <a class="header-anchor" href="#exchangeverification" aria-label="Permalink to &quot;exchangeVerification&quot;">​</a></h3><ul><li><p>type: <code>(ev: ItemExchangeEvent): void</code></p></li><li><p>required: <code>false</code></p><p>跨容器交换前的验证，只有验证通过才执行交换</p></li></ul><h3 id="exchangeprovide" tabindex="-1">exchangeProvide <a class="header-anchor" href="#exchangeprovide" aria-label="Permalink to &quot;exchangeProvide&quot;">​</a></h3><ul><li><p>type: <code>(ev: ItemExchangeEvent): void</code></p></li><li><p>required: <code>false</code></p><p>跨容器移动时Item提供者，在提供的Container上触发</p></li></ul><h3 id="exchangeprocess" tabindex="-1">exchangeProcess <a class="header-anchor" href="#exchangeprocess" aria-label="Permalink to &quot;exchangeProcess&quot;">​</a></h3><ul><li>type: <code>(ev: ItemExchangeEvent): void</code></li><li>required: <code>false</code><br>跨容器移动时Item过程，主要用于处理如何挂载Item到新容器中 <br>通过provideItem添加要移动到目标容器的新item</li></ul><h3 id="exchangereceive" tabindex="-1">exchangeReceive <a class="header-anchor" href="#exchangereceive" aria-label="Permalink to &quot;exchangeReceive&quot;">​</a></h3><ul><li><p>type: <code>(ev: ItemExchangeEvent): void</code></p></li><li><p>required: <code>false</code></p><p>跨容器移动时Item接受者，在接收的Container上触发</p></li></ul><h2 id="布局职能插件钩子" tabindex="-1">布局职能插件钩子 <a class="header-anchor" href="#布局职能插件钩子" aria-label="Permalink to &quot;布局职能插件钩子&quot;">​</a></h2><h3 id="updatelayout" tabindex="-1">updateLayout <a class="header-anchor" href="#updatelayout" aria-label="Permalink to &quot;updateLayout&quot;">​</a></h3><ul><li><p>type: <code>(ev: ItemLayoutEvent): void</code></p></li><li><p>required: <code>false</code></p><p>发起一次更新，由当前使用的布局插件自行实现更新逻辑</p></li></ul><h3 id="each" tabindex="-1">each <a class="header-anchor" href="#each" aria-label="Permalink to &quot;each&quot;">​</a></h3><ul><li>type: <code>(ev: MatrixEvent): void</code></li><li>required: <code>false</code><br>用作遍历矩阵的控制函数，可以自行实现遍历矩阵逻辑， <br>比如螺旋遍历，交叉遍历...各种花里胡哨的功能， <br>只需关心: <br> xxx(eachName) + start 方向作为遍历的主布局，后面的 xxx-reverse ,end 等相关功能由 flip 钩子实现</li></ul><h3 id="flip" tabindex="-1">flip <a class="header-anchor" href="#flip" aria-label="Permalink to &quot;flip&quot;">​</a></h3><ul><li>type: <code>(ev: MatrixEvent): void</code></li><li>required: <code>false</code><br>翻转矩阵，无需关心实现逻辑，内部已经做了兼容和实现 <br>只需要关心使用遍历的名称 xxx, xxx-reverse 和 遍历的起点 start, end 在不同情况运行 verticalMirrorFlip 或 horizontalMirrorFlip 就行 <br>使用翻转函数: <br> layoutManager.verticalMirrorFlip <br> layoutManager.horizontalMirrorFlip翻转</li></ul><h3 id="updatecloneelementstyle" tabindex="-1">updateCloneElementStyle <a class="header-anchor" href="#updatecloneelementstyle" aria-label="Permalink to &quot;updateCloneElementStyle&quot;">​</a></h3><ul><li><p>type: <code>(ev: CloneElementStyleEvent): void</code></p></li><li><p>required: <code>false</code></p><p>更新克隆(影子)元素的尺寸,移动位置</p></li></ul><h3 id="dragging" tabindex="-1">dragging <a class="header-anchor" href="#dragging" aria-label="Permalink to &quot;dragging&quot;">​</a></h3><ul><li><p>type: <code>(ev: ItemDragEvent): void</code></p></li><li><p>required: <code>false</code></p><p>拖动Item中</p></li></ul><h3 id="dragend" tabindex="-1">dragend <a class="header-anchor" href="#dragend" aria-label="Permalink to &quot;dragend&quot;">​</a></h3><ul><li><p>type: <code>(ev: ItemDragEvent): void</code></p></li><li><p>required: <code>false</code></p><p>拖动Item结束</p></li></ul><h3 id="dragtotop" tabindex="-1">dragToTop <a class="header-anchor" href="#dragtotop" aria-label="Permalink to &quot;dragToTop&quot;">​</a></h3><ul><li><p>type: <code>(ev: ItemDragEvent): void</code></p></li><li><p>required: <code>false</code></p><p>往当前源Item的<code>top</code>方向拖动Item</p></li></ul><h3 id="dragtoright" tabindex="-1">dragToRight <a class="header-anchor" href="#dragtoright" aria-label="Permalink to &quot;dragToRight&quot;">​</a></h3><ul><li><p>type: <code>(ev: ItemDragEvent): void</code></p></li><li><p>required: <code>false</code></p><p>往当前源Item的<code>right</code>方向拖动Item</p></li></ul><h3 id="dragtobottom" tabindex="-1">dragToBottom <a class="header-anchor" href="#dragtobottom" aria-label="Permalink to &quot;dragToBottom&quot;">​</a></h3><ul><li><p>type: <code>(ev: ItemDragEvent): void</code></p></li><li><p>required: <code>false</code></p><p>往当前源Item的<code>bottom</code>方向拖动Item</p></li></ul><h3 id="dragtoleft" tabindex="-1">dragToLeft <a class="header-anchor" href="#dragtoleft" aria-label="Permalink to &quot;dragToLeft&quot;">​</a></h3><ul><li><p>type: <code>(ev: ItemDragEvent): void</code></p></li><li><p>required: <code>false</code></p><p>往当前源Item的<code>left</code>方向拖动Item</p></li></ul><h3 id="dragtoblank" tabindex="-1">dragToBlank <a class="header-anchor" href="#dragtoblank" aria-label="Permalink to &quot;dragToBlank&quot;">​</a></h3><ul><li><p>type: <code>(ev: ItemDragEvent): void</code></p></li><li><p>required: <code>false</code></p><p>当前鼠标指针位置拖动到矩阵空白位置触发</p></li></ul><h3 id="resizing" tabindex="-1">resizing <a class="header-anchor" href="#resizing" aria-label="Permalink to &quot;resizing&quot;">​</a></h3><ul><li><p>type: <code>(ev: ItemResizeEvent): void</code></p></li><li><p>required: <code>false</code></p><p>调整大小中...</p></li></ul><h3 id="resized" tabindex="-1">resized <a class="header-anchor" href="#resized" aria-label="Permalink to &quot;resized&quot;">​</a></h3><ul><li><p>type: <code>(ev: ItemResizeEvent): void</code></p></li><li><p>required: <code>false</code></p><p>调整大小结束</p></li></ul><h3 id="resizetotop" tabindex="-1">resizeToTop <a class="header-anchor" href="#resizetotop" aria-label="Permalink to &quot;resizeToTop&quot;">​</a></h3><ul><li><p>type: <code>(ev: ItemResizeEvent): void</code></p></li><li><p>required: <code>false</code></p><p>往当前源Item的<code>top</code>方向调整大小</p></li></ul><h3 id="resizetoright" tabindex="-1">resizeToRight <a class="header-anchor" href="#resizetoright" aria-label="Permalink to &quot;resizeToRight&quot;">​</a></h3><ul><li><p>type: <code>(ev: ItemResizeEvent): void</code></p></li><li><p>required: <code>false</code></p><p>往当前源Item的<code>right</code>方向调整大小</p></li></ul><h3 id="resizetobottom" tabindex="-1">resizeToBottom <a class="header-anchor" href="#resizetobottom" aria-label="Permalink to &quot;resizeToBottom&quot;">​</a></h3><ul><li><p>type: <code>(ev: ItemResizeEvent): void</code></p></li><li><p>required: <code>false</code></p><p>往当前源Item的<code>bottom</code>方向调整大小</p></li></ul><h3 id="resizetoleft" tabindex="-1">resizeToLeft <a class="header-anchor" href="#resizetoleft" aria-label="Permalink to &quot;resizeToLeft&quot;">​</a></h3><ul><li><p>type: <code>(ev: ItemResizeEvent): void</code></p></li><li><p>required: <code>false</code></p><p>往当前源Item的<code>left</code>方向调整大小</p></li></ul><h3 id="closing" tabindex="-1">closing <a class="header-anchor" href="#closing" aria-label="Permalink to &quot;closing&quot;">​</a></h3><ul><li><p>type: <code>(ev: ItemLayoutEvent): void</code></p></li><li><p>required: <code>false</code></p><p>关闭Item中</p></li></ul><h3 id="closed" tabindex="-1">closed <a class="header-anchor" href="#closed" aria-label="Permalink to &quot;closed&quot;">​</a></h3><ul><li><p>type: <code>(ev: ItemLayoutEvent): void</code></p></li><li><p>required: <code>false</code></p><p>关闭Item结束</p></li></ul><h2 id="事件错误类型" tabindex="-1">事件错误类型 <a class="header-anchor" href="#事件错误类型" aria-label="Permalink to &quot;事件错误类型&quot;">​</a></h2><ul><li><p><code>ContainerOverflowError</code>： 容器溢出或相互重叠</p></li><li><p><code>RepeatedContainerMounting</code>： 容器重复挂载</p></li><li><p><code>ContainerNotMounted</code> ： container未挂载</p></li><li><p><code>ItemAlreadyRemoved</code> ： item已经被移除</p></li></ul>`,94),t=[n];function p(i,r,c,d,h,u){return a(),o("div",null,t)}const v=e(s,[["render",p]]);export{y as __pageData,v as default};
